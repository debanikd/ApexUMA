#############################################################################################
# Calculate the phase, transmission, and electric field for the metalens unit cell with RCWA
# Copyright 2023 Ansys Inc.
##############################################################################################

clear;
#runsweep("height"); # Uncomment to run height sweep

grating_characterization = getsweepresult("height","grating_characterization");
total_energy = getsweepresult("height","total_energy");
radius = grating_characterization.radius;
height = grating_characterization.height;
ni = find(grating_characterization.n, 0); # n index of 0th order
mi = find(grating_characterization.m, 0); # m index of 0th order

S = pinch(grating_characterization.Tpp(1,1,ni,mi,:,:));
T = abs(S)^2;
phase = angle(S);

## Transmission in terms of duty cycle and height
image(radius*1e6,height*1e6,T,"Radius (um)","Height (um)","Transmission");
setplot("colorbar min",0); setplot("colorbar max",1);

## Phase in terms of duty cycle and height
image(radius*1e6,height*1e6,phase,"Radius (um)","Height (um)","Phase");
setplot("colorbar min",-3); setplot("colorbar max",3);

#############################################################
# calculate phase and fields for height = 1.3 um and save data
#############################################################
hi = find(height,1.3e-6);

## Transmission for height = 1.3 um
plot(radius*1e6,T(:,hi),"Radius (um)"," Transmission","Height = 1.3 um","linewidth=2");
setplot("y min",0);setplot("y max",1);
legend("");

## Phase for height = 1.3 um
norm_phase  = pinch(unwrap(phase(:,hi))-phase(1,hi));
plot(radius*1e6,norm_phase, "Radius (um)","Phase (rad)","Height = 1.3 um","linewidth=2");
legend("");

E = getsweepresult("radius","E");
H = getsweepresult("radius","H");

ni = find(grating_characterization.n, 0); # n index of 0th order
mi = find(grating_characterization.m, 0); # m index of 0th order
S = pinch(grating_characterization.Tss(1,1,ni,mi,:,hi));
phase_computed = angle(S);
phase  = pinch(unwrap(phase_computed)-phase_computed(1));
    
# Export EH and phase to .mat file for lens analysis
period = getnamed("RCWA", "x span");
mat_pillar = getnamed("pillar","material");
index_pillar = getnamed("pillar","index");
mat_sub = getnamed("substrate","material");
index_sub = getfdtdindex("SiO2 (Glass) - Palik",E.f,min(E.f),max(E.f));
wavelength = E.lambda;
matlabsave("EH_and_phase_vs_radius",wavelength,height,period,mat_pillar,index_pillar,mat_sub,index_sub,phase,radius,E,H);

#############################################################
# interpolate radius and fields on denser phase data points
#############################################################

phase_interp = linspace(0,2*pi,361); # limit the phase range to 0 - 2*pi
radius_interp = spline(radius,phase,phase_interp); # phase sampled at an interval of 1 degree.
plot(phase_interp*180/pi,radius_interp*1e9,"phase (degree)","radius (nm)","","linewidth=2");
holdon;
plot(phase*180/pi,radius*1e9,"phase (degree)","radius (nm)","","plot type = point,marker type=x, color=red");
legend("radius_interpolated","radius from sweep");
holdoff;

Ex = pinch(E.Ex); Hx = pinch(H.Hx);
Ey = pinch(E.Ey); Hy = pinch(H.Hy);
Ez = pinch(E.Ez); Hz = pinch(H.Hz);
x = E.x;
y = E.y;
z = E.z;
f = E.f;
wavlength = c/f;

# interpolate over radius
Ex = interp(Ex,x,y,radius,x,y,radius_interp);
Ey = interp(Ey,x,y,radius,x,y,radius_interp);
Ez = interp(Ez,x,y,radius,x,y,radius_interp);
Hx = interp(Hx,x,y,radius,x,y,radius_interp);
Hy = interp(Hy,x,y,radius,x,y,radius_interp);
Hz = interp(Hz,x,y,radius,x,y,radius_interp);

# spatial sampling
######################
do_sampling = true;
ns = 3; # sampling per period
if (do_sampling) {
    xs = linspace(min(x),max(x),ns);
    ys = linspace(min(y),max(y),ns);
    Ex = interp(Ex,x,y,radius_interp,xs,ys,radius_interp);
    Ey = interp(Ey,x,y,radius_interp,xs,ys,radius_interp);
    Ez = interp(Ez,x,y,radius_interp,xs,ys,radius_interp);
    Hx = interp(Hx,x,y,radius_interp,xs,ys,radius_interp);
    Hy = interp(Hy,x,y,radius_interp,xs,ys,radius_interp);
    Hz = interp(Hz,x,y,radius_interp,xs,ys,radius_interp);
    
    Ex = reshape(Ex,[ns,ns,1,1,length(phase_interp)]);
    Ey = reshape(Ey,[ns,ns,1,1,length(phase_interp)]);
    Ez = reshape(Ez,[ns,ns,1,1,length(phase_interp)]);
    Hx = reshape(Hx,[ns,ns,1,1,length(phase_interp)]);
    Hy = reshape(Hy,[ns,ns,1,1,length(phase_interp)]);
    Hz = reshape(Hz,[ns,ns,1,1,length(phase_interp)]);

    E = rectilineardataset("E",xs,ys,z);
    E.addparameter("f",f);
    E.addparameter("radius",radius_interp);
    E.addattribute("E",Ex,Ey,Ez);
    H = rectilineardataset("H",xs,ys,z);
    H.addparameter("f",f);
    H.addparameter("radius",radius_interp);
    H.addattribute("H",Hx,Hy,Hz);
    phase = phase_interp;
    radius = radius_interp;
}
matlabsave("EH_and_phase_vs_radius_interp",wavelength,height,period,mat_pillar,index_pillar,mat_sub,index_sub,phase,radius,E,H);

visualize(E);

