# Copyright 2022 Lumerical Solutions Inc

#############################################################################
# Part 1: Visualize phase and transmission as a function of radius and height
#############################################################################
clear;
load("unit_cell_fdtd.fsp");

#sname = "height";
#height = getsweepdata(sname,"height");
#radius = getsweepdata(sname,"radius");
#S = getsweepresult(sname,"S");
#T = getsweepresult(sname,"T");
#nd = length(radius);

## Phase in terms of duty cycle and height
#phase = pinch(angle(S.S21_Gn),1,1); # the dimension of S21_Gn is [frequency,radius,height]
#image(radius*1e6,height*1e6,phase,"Radius (um)","Height (um)","Phase");
#setplot("colorbar min",-pi); setplot("colorbar max",pi);

## Transmission in terms of duty cycle and height
#T0 = pinch(T.T_Gn,1,1); # the dimension of T_Gn is [frequency,radius,height]
#image(radius*1e6,height*1e6,T0,"Radius (um)","Height (um)","Transmission");
#setplot("colorbar min",0); setplot("colorbar max",1);

## Phase for height = 1.3 um
#hi = find(height,1.3e-6);
#norm_phase  = pinch(unwrap(phase(:,hi))-phase(1,hi)); # normalized to the phase for lowest duty cycle
#plot(radius*1e6,norm_phase,"Radius (um)","Phase (rad)","Height = 1.3 um","plot type = point, linewidth=2");
#setplot("show legend",false);

## Transmission for height = 1.3 um
#plot(radius*1e6,T0(:,hi),"Radius (um)"," Transmission","Height = 1.3 um","plot type = point,linewidth=2");
#setplot("y min",0);setplot("y max",1);setplot("show legend",false);


###########################################################
# Part 2: Save phase and field data at height = 1.3 um
###########################################################
sname= "radius";
radius = getsweepdata(sname,"radius");
height = getsweepdata(sname,"height");
S = getsweepresult(sname,"S");
phase = pinch(angle(S.S21_Gn),1,1); # the dimension of S21_Gn is [frequency,radius,height]
phase = pinch(unwrap(phase)) - phase(1);
height = height(1);
E = getsweepresult(sname,"E");
H = getsweepresult(sname,"H");
wavelength = E.lambda;
period = getnamed("::model","period");
matlabsave("EH_and_phase_vs_radius_fdtd",wavelength,height,period,phase,radius,E,H);

#get transmission 
T= getsweepresult(sname, "T");
T0=  pinch(T.T_Gn,1,1);
plot(radius * 1e6,T0,"Radius (micron)","T","","plot type = point,marker type=x, color=blue");
setplot("y min", 0);
setplot("y max", 1);
legend("radius_interpolated","radius from sweep");

# interpolate radius and fields on a denser phase data points
phase_interp = linspace(0,2*pi,361); # limit the phase range to 0 - 2*pi
radius_interp = spline(radius,phase,phase_interp); # phase sampled at an interval of 1 degree.
plot(phase_interp*180/pi,radius_interp*1e9,"phase (degree)","radius (nm)","","linewidth=2");
holdon;
plot(phase*180/pi,radius*1e9,"phase (degree)","radius (nm)","","plot type = point,marker type=x, color=red");
legend("radius_interpolated","radius from sweep");
holdoff;

E = getsweepresult(sname,"E");
Ex = pinch(E.Ex); Hx = pinch(H.Hx);
Ey = pinch(E.Ey); Hy = pinch(H.Hy);
Ez = pinch(E.Ez); Hz = pinch(H.Hz);
x = E.x;
y = E.y;
z = E.z;
f = E.f;
wavlength = c/f;

# interpolate over radius
Ex = interp(Ex,x,y,radius,x,y,radius_interp);
Ey = interp(Ey,x,y,radius,x,y,radius_interp);
Ez = interp(Ez,x,y,radius,x,y,radius_interp);
Hx = interp(Hx,x,y,radius,x,y,radius_interp);
Hy = interp(Hy,x,y,radius,x,y,radius_interp);
Hz = interp(Hz,x,y,radius,x,y,radius_interp);

# spatial sampling
######################
do_sampling = true;
ns = 3; # sampling per period

if (do_sampling) {
    xs = linspace(min(x),max(x),ns);
    ys = linspace(min(y),max(y),ns);
    Ex = interp(Ex,x,y,radius_interp,xs,ys,radius_interp);
    Ey = interp(Ey,x,y,radius_interp,xs,ys,radius_interp);
    Ez = interp(Ez,x,y,radius_interp,xs,ys,radius_interp);
    Hx = interp(Hx,x,y,radius_interp,xs,ys,radius_interp);
    Hy = interp(Hy,x,y,radius_interp,xs,ys,radius_interp);
    Hz = interp(Hz,x,y,radius_interp,xs,ys,radius_interp);
    
    Ex = reshape(Ex,[ns,ns,1,1,length(phase_interp)]);
    Ey = reshape(Ey,[ns,ns,1,1,length(phase_interp)]);
    Ez = reshape(Ez,[ns,ns,1,1,length(phase_interp)]);
    Hx = reshape(Hx,[ns,ns,1,1,length(phase_interp)]);
    Hy = reshape(Hy,[ns,ns,1,1,length(phase_interp)]);
    Hz = reshape(Hz,[ns,ns,1,1,length(phase_interp)]);
    
    E = rectilineardataset("E",xs,ys,z);
    E.addparameter("f",f);
    E.addparameter("radius",radius_interp);
    E.addattribute("E",Ex,Ey,Ez);
    H = rectilineardataset("H",xs,ys,z);
    H.addparameter("f",f);
    H.addparameter("radius",radius_interp);
    H.addattribute("H",Hx,Hy,Hz);
    phase = phase_interp;
    radius = radius_interp;
}

mat_pillar = getnamed("pillar","material");
index_pillar = getindex("pillar",c/wavelength);
mat_sub = getnamed("substrate","material");
index_sub = getnamed("substrate","index");

?index_pillar;
matlabsave("EH_and_phase_vs_radius_interp_fdtd_si_sio2_sept13",wavelength,height,period,mat_pillar,index_pillar,mat_sub,index_sub,phase,radius,E,H);
matrixdataset("EH_and_phase_vs_radius",wavelength,height,period,mat_pillar,index_pillar,mat_sub,index_sub,phase,radius,E,H );

visualize(E);

    

